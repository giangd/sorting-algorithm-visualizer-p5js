{"version":3,"sources":["sketches/createBar.js","sketches/bubble.js","sketches/quick.js","sketches/insertion.js","sketches/merge.js","sketches/selection.js","App.js","index.js"],"names":["createBar","p","value","index","numBars","color","canvasWidth","canvasHeight","width","Math","floor","height","round","map","show","noStroke","fill","this","rect","sketch","canvas","colors","bars","barsCopy","animation","randomArray","dataIsInitialized","frameCount","drawOnce","setup","createCanvas","frameRate","noLoop","draw","background","length","i","colorInspecting","colorUninspecting","colorSwap","i1","i2","j","swap","colorUnswap","stepThroughAnimation","myCustomRedrawAccordingToNewPropsHandler","props","setFrameRate","speed","isPlaying","loop","shouldReset","array","push","tempBar","undefined","minIndex","colorIndexMin","colorUnindexMin","Infinity","quickSort","low","high","pivot","partition","merge","beginIndex1","endIndex1","beginIndex2","endIndex2","k","A","slice","B","colorMergeMarkers","loopEndCondition","indexA","indexB","colorInspect","unColorInspect","C","unColorMergeMarkers","splice","index1","index2","groupSize","indices","numTimesLoop","ceil","beginIndex","endIndex","formGroups","indexMin","App","handleSpeedChange","event","setState","Number","target","handleNumBarsChange","newNumBars","initializeData","handleClick","prevState","handleReset","state","nearlySortedArray","reversedArray","random","sort","a","b","fewSortedArray","repeatedValue","console","log","data","playButtonText","playButtonVariant","window","innerWidth","className","Button","variant","onClick","Form","Label","Control","type","min","max","step","id","onChange","as","bubbleSketch","insertionSketch","mergeSketch","quickSketch","selectionSketch","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0296ea4c.chunk.js","sourcesContent":["export default function createBar(\r\n    p,\r\n    value,\r\n    index,\r\n    numBars,\r\n    color = \"black\",\r\n    canvasWidth,\r\n    canvasHeight\r\n) {\r\n    // console.log(\r\n    //     `   createBar p.round(p.width/numbars): ${p.round(p.width / numBars)}`\r\n    // );\r\n    // console.log(`p.width: ${p.width} numBars: ${numBars}`);\r\n    // console.log(\"hello\");\r\n    return {\r\n        p,\r\n        value,\r\n        index,\r\n        numBars,\r\n        color,\r\n        width: Math.floor(canvasWidth / numBars),\r\n        height: p.round(p.map(value, 0, numBars, 10, canvasHeight)),\r\n        show() {\r\n            p.noStroke();\r\n            p.fill(this.color);\r\n            p.rect(\r\n                this.index * this.width,\r\n                canvasHeight,\r\n                this.width,\r\n                -this.height\r\n            );\r\n        },\r\n    };\r\n}\r\n/*\r\n\r\n\r\n\r\n\r\n\r\n  |\r\n| |\r\n0 1 2 3\r\n\r\n\r\n*/\r\n","import createBar from \"./createBar\";\r\n\r\nexport default function sketch(p) {\r\n    let canvas;\r\n    const colors = {\r\n        normalColor: \"#2B2D42\",\r\n        swapColor: \"#ff851b\",\r\n        inspectingColor: \"#297373\",\r\n        doneColor: \"#219724\",\r\n        backgroundColor: \"#fff6f8\",\r\n    };\r\n    let bars = [];\r\n    let barsCopy = [];\r\n    let numBars = 20;\r\n    let animation = [];\r\n\r\n    let randomArray = [];\r\n    let dataIsInitialized = false;\r\n\r\n    let canvasWidth;\r\n    let canvasHeight;\r\n\r\n    let frameCount = 0;\r\n\r\n    let drawOnce = false;\r\n\r\n    p.setup = () => {\r\n        // p.randomSeed(1);\r\n        canvas = p.createCanvas(canvasWidth, canvasHeight);\r\n\r\n        p.frameRate(1);\r\n        p.noLoop();\r\n        frameCount = 0;\r\n    };\r\n\r\n    function stepThroughAnimation(frameCount, bars) {\r\n        if (frameCount >= animation.length || frameCount < 0) {\r\n            // console.log(\r\n            //     `frameCount >= animation.length: ${\r\n            //         frameCount >= animation.length\r\n            //     } frameCount < 0: ${frameCount < 0}\r\n            //     frameCount: ${frameCount}`\r\n            // );\r\n            for (let i = 0; i < numBars; i++) {\r\n                bars[i].color = colors.doneColor;\r\n                bars[i].index = i; // always update the bar's index before calling show()\r\n                bars[i].show();\r\n            }\r\n            p.noLoop();\r\n            return;\r\n        }\r\n\r\n        if (\"colorInspecting\" in animation[frameCount]) {\r\n            // console.log(`color inspecting`);\r\n            let j = animation[frameCount].colorInspecting;\r\n            bars[j].color = colors.inspectingColor;\r\n            // bars[j + 1].color = colors.inspectingColor;\r\n        } else if (\"colorUninspecting\" in animation[frameCount]) {\r\n            // console.log(`color uninspecting`);\r\n            let j = animation[frameCount].colorUninspecting;\r\n            bars[j].color = colors.normalColor;\r\n            // bars[j + 1].color = colors.normalColor;\r\n        } else if (\"colorSwap\" in animation[frameCount]) {\r\n            // console.log(`colorSwap ${animation[frameCount].colorSwap}`);\r\n\r\n            // let i1, i2;\r\n            let [i1, i2] = animation[frameCount].colorSwap;\r\n            // console.log(`colorSwap: ${i1}, ${i2}`);\r\n            bars[i1].color = colors.swapColor;\r\n            bars[i2].color = colors.swapColor;\r\n        } else if (\"swap\" in animation[frameCount]) {\r\n            let j = animation[frameCount].swap;\r\n            // console.log(`swap: ${j}`);\r\n            [bars[j], bars[j + 1]] = [bars[j + 1], bars[j]];\r\n        } else if (\"colorUnswap\" in animation[frameCount]) {\r\n            let [i1, i2] = animation[frameCount].colorUnswap;\r\n            // console.log(`colorUnswap: ${i1}, ${i2}`);\r\n            bars[i1].color = colors.normalColor;\r\n            bars[i2].color = colors.normalColor;\r\n        }\r\n\r\n        for (let i = 0; i < numBars; i++) {\r\n            // console.log(barsCopy[i]);\r\n            bars[i].index = i; // always update the bar's inex before calling show()\r\n            bars[i].show();\r\n        }\r\n        // console.log(`   drew`);\r\n    }\r\n\r\n    p.draw = () => {\r\n        // console.log(\"draw()\");\r\n        p.background(colors.backgroundColor);\r\n        if (dataIsInitialized) {\r\n            // console.log(`   before frameCount: ${frameCount}`);\r\n\r\n            stepThroughAnimation(frameCount, barsCopy);\r\n            frameCount++;\r\n            // console.log(`   after frameCount: ${frameCount}`);\r\n        }\r\n\r\n        // p.textSize(10);\r\n        // p.fill(0);\r\n        // p.text(p.round(p.getFrameRate()), 5, 10);\r\n\r\n        if (drawOnce) {\r\n            p.noLoop();\r\n            drawOnce = false;\r\n        }\r\n    };\r\n\r\n    p.myCustomRedrawAccordingToNewPropsHandler = (props) => {\r\n        if (canvas) {\r\n            // runs during any change\r\n            p.setFrameRate(props.speed); // updated by slider\r\n            if (props.isPlaying) {\r\n                // updated by play/pause button\r\n                // console.log(\"play\");\r\n                p.loop();\r\n            } else {\r\n                // console.log(\"pause\");\r\n                p.noLoop();\r\n            }\r\n            if (props.numBars !== numBars || props.shouldReset === true) {\r\n                // console.log(\r\n                //     `   different numbars detected old: ${numBars} new: ${props.numBars}`\r\n                // );\r\n                numBars = props.numBars;\r\n                dataIsInitialized = false;\r\n                // console.log(`1 old array: ${randomArray}`);\r\n                // console.log(`1 new array: ${props.array}`);\r\n            }\r\n        }\r\n        if (!dataIsInitialized && props.array.length > 0) {\r\n            frameCount = 0;\r\n            // runs during componentDidMount\r\n\r\n            canvasWidth = props.canvasWidth; // sync local variables\r\n            canvasHeight = props.canvasHeight;\r\n            // console.log(`2 old array: ${randomArray}`);\r\n            // console.log(`2 new array: ${props.array}`);\r\n\r\n            randomArray = props.array;\r\n            numBars = props.numBars;\r\n            dataIsInitialized = true;\r\n\r\n            bars = [];\r\n            barsCopy = [];\r\n            animation = [];\r\n\r\n            for (let i = 0; i < numBars; i++) {\r\n                bars.push(\r\n                    createBar(\r\n                        p,\r\n                        randomArray[i],\r\n                        i,\r\n                        numBars,\r\n                        colors.normalColor,\r\n                        canvasWidth,\r\n                        canvasHeight\r\n                    )\r\n                );\r\n                barsCopy.push(bars[bars.length - 1]);\r\n            }\r\n\r\n            // sort the bars array and use it as a template to add animations\r\n            animation.push({});\r\n            for (let i = 0; i < numBars; i++) {\r\n                for (let j = 0; j < numBars - i - 1; j++) {\r\n                    animation.push({\r\n                        colorInspecting: j,\r\n                    });\r\n                    if (bars[j].value > bars[j + 1].value) {\r\n                        animation.push({\r\n                            colorSwap: [j, j + 1],\r\n                        });\r\n                        animation.push({\r\n                            swap: j,\r\n                        });\r\n                        animation.push({\r\n                            colorUnswap: [j, j + 1],\r\n                        });\r\n\r\n                        const tempBar = bars[j];\r\n                        bars[j] = bars[j + 1];\r\n\r\n                        bars[j + 1] = tempBar;\r\n                    } else {\r\n                        animation.push({\r\n                            colorUninspecting: j,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            // console.log(\r\n            //     `barsCopy.length: ${barsCopy.length} dataIsInitialized: ${dataIsInitialized}`\r\n            // );\r\n            if (props.isPlaying) {\r\n                // make sure sketch is in sync with play/pause button at start\r\n                // console.log(\"play\");\r\n                p.loop();\r\n            } else {\r\n                // console.log(\"pause\");\r\n                drawOnce = true;\r\n                p.loop();\r\n            }\r\n        }\r\n    };\r\n}\r\n","import createBar from \"./createBar\";\r\n\r\nexport default function sketch(p) {\r\n    let canvas;\r\n    const colors = {\r\n        normalColor: \"#2B2D42\",\r\n        swapColor: \"#ff851b\",\r\n        inspectingColor: \"#297373\",\r\n        doneColor: \"#219724\",\r\n\r\n        backgroundColor: \"#fff6f8\",\r\n\r\n    };\r\n    let bars = [];\r\n    let barsCopy = [];\r\n    let numBars = 20;\r\n    let animation = [];\r\n\r\n    let randomArray = [];\r\n    let dataIsInitialized = false;\r\n\r\n    let canvasWidth;\r\n    let canvasHeight;\r\n\r\n    let frameCount = 0;\r\n    let drawOnce = false;\r\n\r\n\r\n\r\n    p.setup = () => {\r\n        // p.randomSeed(1);\r\n        canvas = p.createCanvas(canvasWidth, canvasHeight);\r\n\r\n        p.frameRate(1);\r\n    };\r\n\r\n    function stepThroughAnimation(frameCount, bars) {\r\n        if (frameCount >= animation.length || frameCount < 0) {\r\n            for (let i = 0; i < numBars; i++) {\r\n                bars[i].color = colors.doneColor;\r\n                bars[i].index = i; // always update the bar's index before calling show()\r\n                bars[i].show();\r\n            }\r\n            p.noLoop();\r\n            return;\r\n        }\r\n\r\n        if (\"colorInspecting\" in animation[frameCount]) {\r\n            let j = animation[frameCount].colorInspecting;\r\n            bars[j].color = colors.inspectingColor;\r\n            // bars[j + 1].color = colors.inspectingColor;\r\n        } else if (\"colorUninspecting\" in animation[frameCount]) {\r\n            let [i, j] = animation[frameCount].colorUninspecting;\r\n            if (i !== undefined) {\r\n                bars[i].color = colors.normalColor;\r\n            }\r\n            if (j !== undefined) {\r\n                bars[j].color = colors.normalColor;\r\n            }\r\n            // bars[j + 1].color = colors.normalColor;\r\n        } else if (\"colorSwap\" in animation[frameCount]) {\r\n            // let i1, i2;\r\n            let [i1, i2] = animation[frameCount].colorSwap;\r\n            bars[i1].color = colors.swapColor;\r\n            bars[i2].color = colors.swapColor;\r\n            // [bars[i1], bars[i2]] = [bars[i2], bars[i1]];\r\n        } else if (\"swap\" in animation[frameCount]) {\r\n            let [j, minIndex] = animation[frameCount].swap;\r\n\r\n            [bars[j], bars[minIndex]] = [bars[minIndex], bars[j]];\r\n            bars[j].color = colors.normalColor;\r\n            bars[minIndex].color = colors.normalColor;\r\n        } else if (\"colorUnswap\" in animation[frameCount]) {\r\n            let [i1, i2] = animation[frameCount].colorUnswap;\r\n            bars[i1].color = colors.normalColor;\r\n            bars[i2].color = colors.normalColor;\r\n        } else if (\"colorIndexMin\" in animation[frameCount]) {\r\n            let i1 = animation[frameCount].colorIndexMin;\r\n            bars[i1].color = colors.swapColor;\r\n        } else if (\"colorUnindexMin\" in animation[frameCount]) {\r\n            let i1 = animation[frameCount].colorUnindexMin;\r\n            bars[i1].color = colors.normalColor;\r\n        }\r\n\r\n        for (let i = 0; i < numBars; i++) {\r\n            bars[i].index = i; // always update the bar's index before calling show()\r\n            bars[i].show();\r\n        }\r\n    }\r\n\r\n    p.draw = () => {\r\n        p.background(colors.backgroundColor);\r\n\r\n\r\n        if (dataIsInitialized) {\r\n            stepThroughAnimation(frameCount, barsCopy);\r\n            frameCount++;\r\n            // stepThroughAnimation(p.frameCount - 1, barsCopy);\r\n            // for (let i = 0; i < numBars; i++) {\r\n            //     bars[i].index = i; // always update the bar's index before calling show()\r\n            //     bars[i].show();\r\n            // }\r\n        }\r\n        // p.textSize(10);\r\n        // p.fill(0);\r\n        // p.text(p.round(p.getFrameRate()), 5, 10);\r\n\r\n                if (drawOnce) {\r\n            p.noLoop();\r\n            drawOnce = false;\r\n        }\r\n    };\r\n\r\n    p.myCustomRedrawAccordingToNewPropsHandler = (props) => {\r\n        if (canvas) {\r\n            // runs during any change\r\n            p.setFrameRate(props.speed); // updated by slider\r\n            if (props.isPlaying) {\r\n                // updated by play/pause button\r\n                p.loop();\r\n            } else {\r\n                p.noLoop();\r\n            }\r\n            if (props.numBars !== numBars || props.shouldReset === true) {\r\n\r\n                // console.log(\r\n                //     `   different numbars detected old: ${numBars} new: ${props.numBars}`\r\n                // );\r\n                numBars = props.numBars;\r\n                dataIsInitialized = false;\r\n\r\n                // console.log(`1 old array: ${randomArray}`);\r\n                // console.log(`1 new array: ${props.array}`);\r\n            }\r\n        }\r\n        if (!dataIsInitialized && props.array.length > 0) {\r\n\r\n            // runs during componentDidMount\r\n\r\n\r\n            frameCount = 0;\r\n            bars = [];\r\n            barsCopy = [];\r\n            animation = [];\r\n\r\n\r\n            canvasWidth = props.canvasWidth; // sync local variables\r\n            canvasHeight = props.canvasHeight;\r\n            randomArray = props.array;\r\n            numBars = props.numBars;\r\n            dataIsInitialized = true;\r\n\r\n            for (let i = 0; i < numBars; i++) {\r\n                bars.push(\r\n                    createBar(\r\n                        p,\r\n                        randomArray[i],\r\n                        i,\r\n                        numBars,\r\n                        colors.normalColor,\r\n                        canvasWidth,\r\n                        canvasHeight\r\n                    )\r\n                );\r\n                barsCopy.push(bars[bars.length - 1]);\r\n            }\r\n\r\n            // sort the bars array and use it as a template to add animations\r\n            animation.push({});\r\n            bars.push(\r\n                createBar(\r\n                    p,\r\n                    Infinity,\r\n                    Infinity,\r\n                    numBars,\r\n                    colors.normalColor,\r\n                    canvasWidth,\r\n                    canvasHeight\r\n                )\r\n            );\r\n            barsCopy.push(\r\n                createBar(\r\n                    p,\r\n                    Infinity,\r\n                    Infinity,\r\n                    numBars,\r\n                    colors.normalColor,\r\n                    canvasWidth,\r\n                    canvasHeight\r\n                )\r\n            );\r\n            quickSort(bars, 0, bars.length - 1);\r\n            if (props.isPlaying) {\r\n                // make sure sketch is in sync with play/pause button at start\r\n                // console.log(\"play\");\r\n                p.loop();\r\n            } else {\r\n                // console.log(\"pause\");\r\n                drawOnce = true;\r\n                p.loop();\r\n            }\r\n        }\r\n    };\r\n\r\n    function quickSort(array, low, high) {\r\n        if (low < high) {\r\n            let j = partition(array, low, high);\r\n            quickSort(array, low, j);\r\n            quickSort(array, j + 1, high);\r\n        }\r\n    }\r\n    function partition(array, low, high) {\r\n        let pivot = array[low];\r\n        let i = low;\r\n        let j = high;\r\n        while (i < j) {\r\n            do {\r\n                i++;\r\n                animation.push({\r\n                    colorInspecting: i,\r\n                });\r\n                if (array[i].value <= pivot.value) {\r\n                    animation.push({\r\n                        colorUninspecting: [i],\r\n                    });\r\n                }\r\n            } while (array[i].value <= pivot.value);\r\n            do {\r\n                j--;\r\n                animation.push({\r\n                    colorInspecting: j,\r\n                });\r\n\r\n                if (array[j].value > pivot.value) {\r\n                    animation.push({\r\n                        colorUninspecting: [j],\r\n                    });\r\n                }\r\n            } while (array[j].value > pivot.value);\r\n\r\n            if (i < j) {\r\n                [array[i], array[j]] = [array[j], array[i]];\r\n\r\n                animation.push({\r\n                    colorSwap: [i, j],\r\n                });\r\n                animation.push({\r\n                    swap: [i, j],\r\n                });\r\n\r\n                animation.push({\r\n                    colorUnswap: [i, j],\r\n                });\r\n            } else {\r\n                animation.push({\r\n                    colorUninspecting: [i, j],\r\n                });\r\n            }\r\n        }\r\n        [array[low], array[j]] = [array[j], array[low]];\r\n        animation.push({\r\n            colorSwap: [low, j],\r\n        });\r\n        animation.push({\r\n            swap: [low, j],\r\n        });\r\n        // animation.push({\r\n        //     colorUnswap: [low, j],\r\n        // });\r\n        return j;\r\n    }\r\n}\r\n","import createBar from \"./createBar\";\r\n\r\nexport default function sketch(p) {\r\n    let canvas;\r\n    const colors = {\r\n        normalColor: \"#2B2D42\",\r\n        swapColor: \"#ff851b\",\r\n        inspectingColor: \"#297373\",\r\n        doneColor: \"#219724\",\r\n\r\n        backgroundColor: \"#fff6f8\",\r\n    };\r\n    let bars = [];\r\n    let barsCopy = [];\r\n    let numBars = 20;\r\n    let animation = [];\r\n\r\n    let randomArray = [];\r\n    let dataIsInitialized = false;\r\n\r\n    let canvasWidth;\r\n    let canvasHeight;\r\n\r\n    let frameCount = 0;\r\n\r\n    let drawOnce = false;\r\n\r\n    p.setup = () => {\r\n        // p.randomSeed(1);\r\n        canvas = p.createCanvas(canvasWidth, canvasHeight);\r\n\r\n        p.frameRate(1);\r\n    };\r\n\r\n    function stepThroughAnimation(frameCount, bars) {\r\n        if (frameCount >= animation.length || frameCount < 0) {\r\n            for (let i = 0; i < numBars; i++) {\r\n                bars[i].color = colors.doneColor;\r\n                bars[i].index = i; // always update the bar's index before calling show()\r\n                bars[i].show();\r\n            }\r\n            p.noLoop();\r\n            return;\r\n        }\r\n\r\n        if (\"colorInspecting\" in animation[frameCount]) {\r\n            // console.log(`color inspecting`);\r\n            let j = animation[frameCount].colorInspecting;\r\n            bars[j].color = colors.inspectingColor;\r\n            // bars[j + 1].color = colors.inspectingColor;\r\n        } else if (\"colorUninspecting\" in animation[frameCount]) {\r\n            // console.log(`color uninspecting`);\r\n            let j = animation[frameCount].colorUninspecting;\r\n            bars[j].color = colors.normalColor;\r\n            // bars[j + 1].color = colors.normalColor;\r\n        } else if (\"colorSwap\" in animation[frameCount]) {\r\n            // console.log(`colorSwap ${animation[frameCount].colorSwap}`);\r\n\r\n            // let i1, i2;\r\n            let [i1, i2] = animation[frameCount].colorSwap;\r\n            // console.log(`colorSwap: ${i1}, ${i2}`);\r\n            bars[i1].color = colors.swapColor;\r\n            bars[i2].color = colors.swapColor;\r\n        } else if (\"swap\" in animation[frameCount]) {\r\n            let j = animation[frameCount].swap;\r\n            // console.log(`swap: ${j}`);\r\n            [bars[j], bars[j - 1]] = [bars[j - 1], bars[j]];\r\n        } else if (\"colorUnswap\" in animation[frameCount]) {\r\n            let [i1, i2] = animation[frameCount].colorUnswap;\r\n            // console.log(`colorUnswap: ${i1}, ${i2}`);\r\n            bars[i1].color = colors.normalColor;\r\n            bars[i2].color = colors.normalColor;\r\n        }\r\n\r\n        for (let i = 0; i < numBars; i++) {\r\n            bars[i].index = i; // always update the bar's index before calling show()\r\n            bars[i].show();\r\n        }\r\n    }\r\n\r\n    p.draw = () => {\r\n        // console.log(\"drew\");\r\n        p.background(colors.backgroundColor);\r\n\r\n        if (dataIsInitialized) {\r\n            stepThroughAnimation(frameCount, barsCopy);\r\n            frameCount++;\r\n            // stepThroughAnimation(p.frameCount - 1, barsCopy);\r\n            // for (let i = 0; i < numBars; i++) {\r\n            //     bars[i].index = i; // always update the bar's index before calling show()\r\n            //     bars[i].show();\r\n            // }\r\n        }\r\n        // p.textSize(10);\r\n        // p.fill(0);\r\n        // p.text(p.round(p.getFrameRate()), 5, 10);\r\n\r\n        if (drawOnce) {\r\n            p.noLoop();\r\n            drawOnce = false;\r\n        }\r\n    };\r\n\r\n    p.myCustomRedrawAccordingToNewPropsHandler = (props) => {\r\n        if (canvas) {\r\n            // runs during any change\r\n            p.setFrameRate(props.speed); // updated by slider\r\n            if (props.isPlaying) {\r\n                // updated by play/pause button\r\n                // console.log(\"play\");\r\n                p.loop();\r\n            } else {\r\n                // console.log(\"pause\");\r\n                p.noLoop();\r\n            }\r\n            if (props.numBars !== numBars || props.shouldReset === true) {\r\n                // console.log(\r\n                //     `   different numbars detected old: ${numBars} new: ${props.numBars}`\r\n                // );\r\n                numBars = props.numBars;\r\n                dataIsInitialized = false;\r\n\r\n                // console.log(`1 old array: ${randomArray}`);\r\n                // console.log(`1 new array: ${props.array}`);\r\n            }\r\n        }\r\n        if (!dataIsInitialized && props.array.length > 0) {\r\n            // runs during componentDidMount\r\n\r\n            frameCount = 0;\r\n            bars = [];\r\n            barsCopy = [];\r\n            animation = [];\r\n\r\n            canvasWidth = props.canvasWidth; // sync local variables\r\n            canvasHeight = props.canvasHeight;\r\n            randomArray = props.array;\r\n            numBars = props.numBars;\r\n            dataIsInitialized = true;\r\n\r\n            for (let i = 0; i < numBars; i++) {\r\n                bars.push(\r\n                    createBar(\r\n                        p,\r\n                        randomArray[i],\r\n                        i,\r\n                        numBars,\r\n                        colors.normalColor,\r\n                        canvasWidth,\r\n                        canvasHeight\r\n                    )\r\n                );\r\n                barsCopy.push(bars[bars.length - 1]);\r\n            }\r\n\r\n            // sort the bars array and use it as a template to add animations\r\n            animation.push({});\r\n            for (let i = 1; i < numBars; i++) {\r\n                let j = i;\r\n                animation.push({\r\n                    colorInspecting: j,\r\n                });\r\n                while (j > 0 && bars[j - 1].value > bars[j].value) {\r\n                    animation.push({\r\n                        colorSwap: [j, j - 1],\r\n                    });\r\n                    animation.push({\r\n                        swap: j,\r\n                    });\r\n                    animation.push({\r\n                        colorUnswap: [j, j - 1],\r\n                    });\r\n                    [bars[j], bars[j - 1]] = [bars[j - 1], bars[j]];\r\n                    j = j - 1;\r\n                }\r\n                animation.push({\r\n                    colorUninspecting: j,\r\n                });\r\n            }\r\n\r\n            if (props.isPlaying) {\r\n                // make sure sketch is in sync with play/pause button at start\r\n                // console.log(\"play\");\r\n                p.loop();\r\n            } else {\r\n                // console.log(\"pause\");\r\n                drawOnce = true;\r\n                p.loop();\r\n            }\r\n\r\n            // sort the bars array and use it as a template to add animations\r\n            // for (let i = 0; i < numBars; i++) {\r\n            //     for (let j = 0; j < numBars - i - 1; j++) {\r\n            //         animation.push({\r\n            //             colorInspecting: j,\r\n            //         });\r\n            //         if (bars[j].value > bars[j + 1].value) {\r\n            //             animation.push({\r\n            //                 colorSwap: [j, j + 1],\r\n            //             });\r\n            //             animation.push({\r\n            //                 swap: j,\r\n            //             });\r\n            //             animation.push({\r\n            //                 colorUnswap: [j, j + 1],\r\n            //             });\r\n\r\n            //             const tempBar = bars[j];\r\n            //             bars[j] = bars[j + 1];\r\n\r\n            //             bars[j + 1] = tempBar;\r\n            //         } else {\r\n            //             animation.push({\r\n            //                 colorUninspecting: j,\r\n            //             });\r\n            //         }\r\n            //     }\r\n            // }\r\n        }\r\n    };\r\n}\r\n","import createBar from \"./createBar\";\r\n\r\nexport default function sketch(p) {\r\n    let canvas;\r\n    const colors = {\r\n        normalColor: \"#2B2D42\",\r\n        swapColor: \"#ff851b\",\r\n        inspectingColor: \"#297373\",\r\n        doneColor: \"#219724\",\r\n\r\n        backgroundColor: \"#fff6f8\",\r\n\r\n    };\r\n    let bars = [];\r\n    let barsCopy = [];\r\n    let numBars = 20;\r\n    let animation = [];\r\n\r\n    let randomArray = [];\r\n    let dataIsInitialized = false;\r\n\r\n    let canvasWidth;\r\n    let canvasHeight;\r\n\r\n    let frameCount = 0;\r\n\r\n    let drawOnce = false;\r\n\r\n\r\n\r\n    p.setup = () => {\r\n        // p.randomSeed(1);\r\n        canvas = p.createCanvas(canvasWidth, canvasHeight);\r\n\r\n        p.frameRate(1);\r\n    };\r\n\r\n    function stepThroughAnimation(frameCount, bars) {\r\n        if (frameCount >= animation.length || frameCount < 0) {\r\n            for (let i = 0; i < numBars; i++) {\r\n                bars[i].color = colors.doneColor;\r\n                bars[i].index = i; // always update the bar's index before calling show()\r\n                bars[i].show();\r\n            }\r\n            p.noLoop();\r\n            return;\r\n        }\r\n\r\n        if (\"colorMergeMarkers\" in animation[frameCount]) {\r\n            let [beginIndex1, beginIndex2] = animation[\r\n                frameCount\r\n            ].colorMergeMarkers;\r\n\r\n            bars[beginIndex1].color = colors.swapColor;\r\n            bars[beginIndex2].color = colors.swapColor;\r\n\r\n            // console.log(beginIndex1, beginIndex2);\r\n        } else if (\"unColorMergeMarkers\" in animation[frameCount]) {\r\n            let [beginIndex1, beginIndex2] = animation[\r\n                frameCount\r\n            ].unColorMergeMarkers;\r\n\r\n            bars[beginIndex1].color = colors.normalColor;\r\n            bars[beginIndex2].color = colors.normalColor;\r\n\r\n            // console.log(beginIndex1, beginIndex2);\r\n        } else if (\"merge\" in animation[frameCount]) {\r\n            let [beginIndex1, C] = animation[frameCount].merge;\r\n            // console.log(\"merge\");\r\n            // console.log(beginIndex1);\r\n            // console.log(C);\r\n            bars.splice(beginIndex1, C.length, ...C);\r\n        } else if (\"colorInspect\" in animation[frameCount]) {\r\n            let [index1, index2] = animation[frameCount].colorInspect;\r\n            // console.log(index1, index2);\r\n            if (index1 !== undefined) {\r\n                bars[index1].color = colors.inspectingColor;\r\n            }\r\n            if (index2 !== undefined) {\r\n                bars[index2].color = colors.inspectingColor;\r\n            }\r\n        } else if (\"unColorInspect\" in animation[frameCount]) {\r\n            let [index1, index2] = animation[frameCount].unColorInspect;\r\n            // console.log(index1, index2);\r\n            if (index1 !== undefined) {\r\n                bars[index1].color = colors.normalColor;\r\n            }\r\n            if (index2 !== undefined) {\r\n                bars[index2].color = colors.normalColor;\r\n            }\r\n        }\r\n\r\n        // colorInspect: [indexA, indexB];\r\n\r\n        // animation.push({\r\n        //     merge: [beginIndex1, C],\r\n        // });\r\n        // array.splice(beginIndex1, C.length, ...C);\r\n        for (let i = 0; i < numBars; i++) {\r\n            bars[i].index = i; // always update the bar's index before calling show()\r\n            bars[i].show();\r\n        }\r\n    }\r\n\r\n    p.draw = () => {\r\n        // console.log(\"drew\");\r\n        p.background(colors.backgroundColor);\r\n\r\n\r\n        if (dataIsInitialized) {\r\n            stepThroughAnimation(frameCount, barsCopy);\r\n            frameCount++;\r\n            // stepThroughAnimation(p.frameCount - 1, barsCopy);\r\n            // for (let i = 0; i < numBars; i++) {\r\n            // bars[i].index = i; // always update the bar's index before calling show()\r\n            // bars[i].show();\r\n            // }\r\n        }\r\n        // p.textSize(10);\r\n        // p.fill(0);\r\n        // p.text(p.round(p.getFrameRate()), 5, 10);\r\n\r\n        if (drawOnce) {\r\n            p.noLoop();\r\n            drawOnce = false;\r\n        }\r\n    };\r\n\r\n    p.myCustomRedrawAccordingToNewPropsHandler = (props) => {\r\n        if (canvas) {\r\n            // runs during any change\r\n            p.setFrameRate(props.speed); // updated by slider\r\n            if (props.isPlaying) {\r\n                // updated by play/pause button\r\n                // console.log(\"play\");\r\n                p.loop();\r\n            } else {\r\n                // console.log(\"pause\");\r\n                p.noLoop();\r\n            }\r\n            if (props.numBars !== numBars || props.shouldReset === true) {\r\n\r\n                // console.log(\r\n                //     `   different numbars detected old: ${numBars} new: ${props.numBars}`\r\n                // );\r\n                numBars = props.numBars;\r\n                dataIsInitialized = false;\r\n\r\n                // console.log(`1 old array: ${randomArray}`);\r\n                // console.log(`1 new array: ${props.array}`);\r\n            }\r\n        }\r\n        if (!dataIsInitialized && props.array.length > 0) {\r\n\r\n            // runs during componentDidMount\r\n\r\n\r\n            frameCount = 0;\r\n            bars = [];\r\n            barsCopy = [];\r\n            animation = [];\r\n\r\n\r\n            canvasWidth = props.canvasWidth; // sync local variables\r\n            canvasHeight = props.canvasHeight;\r\n            randomArray = props.array;\r\n            numBars = props.numBars;\r\n            dataIsInitialized = true;\r\n\r\n            for (let i = 0; i < numBars; i++) {\r\n                bars.push(\r\n                    createBar(\r\n                        p,\r\n                        randomArray[i],\r\n                        i,\r\n                        numBars,\r\n                        colors.normalColor,\r\n                        canvasWidth,\r\n                        canvasHeight\r\n                    )\r\n                );\r\n                barsCopy.push(bars[bars.length - 1]);\r\n            }\r\n            // console.log(\"before:\");\r\n            // console.log(bars);\r\n\r\n            // sort the bars array and use it as a template to add animations\r\n            animation.push({});\r\n            formGroups(bars);\r\n\r\n            if (props.isPlaying) {\r\n                // make sure sketch is in sync with play/pause button at start\r\n                // console.log(\"play\");\r\n                p.loop();\r\n            } else {\r\n                // console.log(\"pause\");\r\n                drawOnce = true;\r\n                p.loop();\r\n            }\r\n            // console.log(bars);\r\n            // console.log(animation);\r\n            /*\r\n            merge 2 = 1\r\n            0  1\r\n            ->\r\n            01\r\n\r\n            merge 5 = 3\r\n            0  1  2  3  4\r\n            ->\r\n            01  23  4\r\n            ->\r\n            0123  4\r\n            ->\r\n            01234\r\n\r\n            merge 6 = 3\r\n            0  1  2  3  4  5\r\n            ->\r\n            01  23  45\r\n            ->\r\n            0123  45\r\n            ->\r\n            012345\r\n\r\n            merge 13 = 4\r\n            a  b  c  d  e  f  g  h  i  j  k  l  m\r\n            ab  cd  ef  gh  ij  kl  m\r\n            abcd  efgh  ijkl  m\r\n            abcdefgh  ijklm\r\n            abcdefghijklm  \r\n            */\r\n        }\r\n    };\r\n\r\n    function formGroups(array) {\r\n        // make groups of 1\r\n        // make groups of 2\r\n        // make groups of 4\r\n        let groupSize = 1;\r\n        // let arrayCopy = [];\r\n\r\n        while (!(groupSize >= array.length)) {\r\n            // console.log(`   begin groupSize: ${groupSize}`);\r\n            const indices = [];\r\n            for (\r\n                let numTimesLoop = 0;\r\n                numTimesLoop < Math.ceil(array.length / groupSize);\r\n                numTimesLoop++\r\n            ) {\r\n                let beginIndex = numTimesLoop * groupSize;\r\n                let endIndex = beginIndex + groupSize;\r\n\r\n                if (endIndex >= array.length) {\r\n                    endIndex = endIndex + (array.length - endIndex); // get remainder index\r\n                }\r\n\r\n                indices.push({\r\n                    beginIndex: beginIndex,\r\n                    endIndex: endIndex,\r\n                });\r\n\r\n                // console.log(`beginIndex: ${beginIndex} endIndex: ${endIndex}`);\r\n                // if (groupSize >= array.length) {\r\n                //     console.log(`DONE!`);\r\n                // }\r\n            }\r\n            // console.log(indices);\r\n\r\n            for (let i = 0; i < indices.length; i++) {\r\n                if (!(i + 1 < indices.length)) {\r\n                    break;\r\n                }\r\n\r\n                // call merge function\r\n\r\n                merge(\r\n                    array,\r\n                    indices[i].beginIndex,\r\n                    indices[i].endIndex,\r\n                    indices[i + 1].beginIndex,\r\n                    indices[i + 1].endIndex\r\n                );\r\n\r\n                i++;\r\n            }\r\n            // console.log(\"-------------------------------\");\r\n            groupSize *= 2;\r\n        }\r\n    }\r\n\r\n    function merge(array, beginIndex1, endIndex1, beginIndex2, endIndex2) {\r\n        // source: https://www.youtube.com/watch?v=6pV2IF0fgKY\r\n        let i = 0;\r\n        let j = 0;\r\n        let k = 0;\r\n        let A = array.slice(beginIndex1, endIndex1);\r\n        let B = array.slice(beginIndex2, endIndex2);\r\n        // todo: color merge markers\r\n        animation.push({\r\n            colorMergeMarkers: [beginIndex1, beginIndex2],\r\n        });\r\n\r\n        // if (A.length !== B.length) {\r\n        //     if (A.length > B.length) {\r\n\r\n        //     } else {\r\n\r\n        //     }\r\n        // } else {\r\n        let loopEndCondition = A.length >= B.length ? A.length : B.length;\r\n        for (let i = 1; i < loopEndCondition; i++) {\r\n            let indexA = beginIndex1 + i;\r\n            let indexB = beginIndex2 + i;\r\n\r\n            if (indexA >= endIndex1) {\r\n                indexA = undefined;\r\n                // console.log(\"A\");\r\n            }\r\n            if (indexB >= endIndex2) {\r\n                indexB = undefined;\r\n                // console.log(\"B\");\r\n            }\r\n            // console.log(\"   \" + indexA, indexB);\r\n\r\n            animation.push({\r\n                colorInspect: [indexA, indexB],\r\n            });\r\n            animation.push({\r\n                unColorInspect: [indexA, indexB],\r\n            });\r\n        }\r\n\r\n        // console.log(\"\");\r\n        // }\r\n\r\n        let C = [];\r\n\r\n        while (i < A.length && j < B.length) {\r\n            if (A[i].value < B[j].value) {\r\n                C[k++] = A[i++];\r\n            } else {\r\n                C[k++] = B[j++];\r\n            }\r\n        }\r\n        for (; i < A.length; i++) {\r\n            C[k++] = A[i];\r\n        }\r\n        for (; j < B.length; j++) {\r\n            C[k++] = B[j];\r\n        }\r\n\r\n        animation.push({\r\n            unColorMergeMarkers: [beginIndex1, beginIndex2],\r\n        });\r\n\r\n        animation.push({\r\n            merge: [beginIndex1, C],\r\n        });\r\n        array.splice(beginIndex1, C.length, ...C);\r\n    }\r\n}\r\n","import createBar from \"./createBar\";\r\n\r\nexport default function sketch(p) {\r\n    let canvas;\r\n    const colors = {\r\n        normalColor: \"#2B2D42\",\r\n        swapColor: \"#ff851b\",\r\n        inspectingColor: \"#297373\",\r\n        doneColor: \"#219724\",\r\n\r\n        backgroundColor: \"#fff6f8\",\r\n    };\r\n    let bars = [];\r\n    let barsCopy = [];\r\n    let numBars = 20;\r\n    let animation = [];\r\n\r\n    let randomArray = [];\r\n    let dataIsInitialized = false;\r\n\r\n    let canvasWidth;\r\n    let canvasHeight;\r\n\r\n    let frameCount = 0;\r\n    let drawOnce = false;\r\n\r\n    p.setup = () => {\r\n        // p.randomSeed(1);\r\n        canvas = p.createCanvas(canvasWidth, canvasHeight);\r\n\r\n        p.frameRate(1);\r\n        p.noLoop();\r\n        frameCount = 0;\r\n    };\r\n\r\n    function stepThroughAnimation(frameCount, bars) {\r\n        if (frameCount >= animation.length || frameCount < 0) {\r\n            for (let i = 0; i < numBars; i++) {\r\n                bars[i].color = colors.doneColor;\r\n                bars[i].index = i; // always update the bar's index before calling show()\r\n                bars[i].show();\r\n            }\r\n            p.noLoop();\r\n            return;\r\n        }\r\n\r\n        if (\"colorInspecting\" in animation[frameCount]) {\r\n            // console.log(`color inspecting`);\r\n            let j = animation[frameCount].colorInspecting;\r\n            bars[j].color = colors.inspectingColor;\r\n            // bars[j + 1].color = colors.inspectingColor;\r\n        } else if (\"colorUninspecting\" in animation[frameCount]) {\r\n            // console.log(`color uninspecting`);\r\n            let j = animation[frameCount].colorUninspecting;\r\n            bars[j].color = colors.normalColor;\r\n            // bars[j + 1].color = colors.normalColor;\r\n        } else if (\"colorSwap\" in animation[frameCount]) {\r\n            // console.log(`colorSwap ${animation[frameCount].colorSwap}`);\r\n\r\n            // let i1, i2;\r\n            let [i1, i2] = animation[frameCount].colorSwap;\r\n            // console.log(`colorSwap: ${i1}, ${i2}`);\r\n            bars[i1].color = colors.swapColor;\r\n            bars[i2].color = colors.swapColor;\r\n            // [bars[i1], bars[i2]] = [bars[i2], bars[i1]];\r\n        } else if (\"swap\" in animation[frameCount]) {\r\n            let [j, minIndex] = animation[frameCount].swap;\r\n\r\n            // console.log(`swap: ${j}`);\r\n            [bars[j], bars[minIndex]] = [bars[minIndex], bars[j]];\r\n        } else if (\"colorUnswap\" in animation[frameCount]) {\r\n            let [i1, i2] = animation[frameCount].colorUnswap;\r\n            // console.log(`colorUnswap: ${i1}, ${i2}`);\r\n            bars[i1].color = colors.normalColor;\r\n            bars[i2].color = colors.normalColor;\r\n        } else if (\"colorIndexMin\" in animation[frameCount]) {\r\n            let i1 = animation[frameCount].colorIndexMin;\r\n            // console.log(`colorUnswap: ${i1}, ${i2}`);\r\n            bars[i1].color = colors.swapColor;\r\n        } else if (\"colorUnindexMin\" in animation[frameCount]) {\r\n            let i1 = animation[frameCount].colorUnindexMin;\r\n            // console.log(`colorUnswap: ${i1}, ${i2}`);\r\n            bars[i1].color = colors.normalColor;\r\n        }\r\n\r\n        for (let i = 0; i < numBars; i++) {\r\n            bars[i].index = i; // always update the bar's index before calling show()\r\n            bars[i].show();\r\n        }\r\n    }\r\n\r\n    p.draw = () => {\r\n        // console.log(\"drew\");\r\n        p.background(colors.backgroundColor);\r\n\r\n        if (dataIsInitialized) {\r\n            stepThroughAnimation(frameCount, barsCopy);\r\n            frameCount++;\r\n            // stepThroughAnimation(p.frameCount - 1, barsCopy);\r\n            // for (let i = 0; i < numBars; i++) {\r\n            //     bars[i].index = i; // always update the bar's index before calling show()\r\n            //     bars[i].show();\r\n            // }\r\n        }\r\n        // p.textSize(10);\r\n        // p.fill(0);\r\n        // p.text(p.round(p.getFrameRate()), 5, 10);\r\n\r\n        if (drawOnce) {\r\n            p.noLoop();\r\n            drawOnce = false;\r\n        }\r\n    };\r\n\r\n    p.myCustomRedrawAccordingToNewPropsHandler = (props) => {\r\n        if (canvas) {\r\n            // runs during any change\r\n            p.setFrameRate(props.speed); // updated by slider\r\n            if (props.isPlaying) {\r\n                // updated by play/pause button\r\n                // console.log(\"play\");\r\n                p.loop();\r\n            } else {\r\n                // console.log(\"pause\");\r\n                p.noLoop();\r\n            }\r\n            if (props.numBars !== numBars || props.shouldReset === true) {\r\n                // console.log(\r\n                //     `   different numbars detected old: ${numBars} new: ${props.numBars}`\r\n                // );\r\n                numBars = props.numBars;\r\n                dataIsInitialized = false;\r\n\r\n                // console.log(`1 old array: ${randomArray}`);\r\n                // console.log(`1 new array: ${props.array}`);\r\n            }\r\n        }\r\n        if (!dataIsInitialized && props.array.length > 0) {\r\n            // runs during componentDidMount\r\n\r\n            frameCount = 0;\r\n            bars = [];\r\n            barsCopy = [];\r\n            animation = [];\r\n\r\n            canvasWidth = props.canvasWidth; // sync local variables\r\n            canvasHeight = props.canvasHeight;\r\n            randomArray = props.array;\r\n            numBars = props.numBars;\r\n            dataIsInitialized = true;\r\n\r\n            for (let i = 0; i < numBars; i++) {\r\n                bars.push(\r\n                    createBar(\r\n                        p,\r\n                        randomArray[i],\r\n                        i,\r\n                        numBars,\r\n                        colors.normalColor,\r\n                        canvasWidth,\r\n                        canvasHeight\r\n                    )\r\n                );\r\n                barsCopy.push(bars[bars.length - 1]);\r\n            }\r\n\r\n            // sort the bars array and use it as a template to add animations\r\n            animation.push({});\r\n            for (let j = 0; j < numBars; j++) {\r\n                let indexMin = j;\r\n                animation.push({\r\n                    colorIndexMin: indexMin,\r\n                });\r\n\r\n                for (let i = j + 1; i < numBars; i++) {\r\n                    animation.push({\r\n                        colorInspecting: i,\r\n                    });\r\n                    animation.push({\r\n                        colorUninspecting: i,\r\n                    });\r\n                    if (bars[i].value < bars[indexMin].value) {\r\n                        if (indexMin !== j) {\r\n                            animation.push({\r\n                                colorUnindexMin: indexMin,\r\n                            });\r\n                        }\r\n                        indexMin = i;\r\n                        animation.push({\r\n                            colorIndexMin: indexMin,\r\n                        });\r\n                    }\r\n                }\r\n\r\n                if (indexMin !== j) {\r\n                    animation.push({\r\n                        colorSwap: [j, indexMin],\r\n                    });\r\n                    animation.push({\r\n                        swap: [j, indexMin],\r\n                    });\r\n                    [bars[j], bars[indexMin]] = [bars[indexMin], bars[j]];\r\n                    animation.push({\r\n                        colorUnswap: [j, indexMin],\r\n                    });\r\n                } else {\r\n                    animation.push({\r\n                        colorUnindexMin: indexMin,\r\n                    });\r\n                }\r\n            }\r\n            if (props.isPlaying) {\r\n                // make sure sketch is in sync with play/pause button at start\r\n                // console.log(\"play\");\r\n                p.loop();\r\n            } else {\r\n                // console.log(\"pause\");\r\n                drawOnce = true;\r\n                p.loop();\r\n            }\r\n        }\r\n    };\r\n}\r\n","import React from \"react\";\nimport P5Wrapper from \"react-p5-wrapper\";\nimport sketch from \"./sketches/sketch\";\nimport bubbleSketch from \"./sketches/bubble\";\nimport quickSketch from \"./sketches/quick\";\nimport insertionSketch from \"./sketches/insertion\";\nimport mergeSketch from \"./sketches/merge\";\nimport selectionSketch from \"./sketches/selection\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nimport \"./custom.scss\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            randomArray: [],\n            nearlySortedArray: [],\n            reversedArray: [],\n            fewSortedArray: [],\n            speed: 20,\n            // numBars: 20,\n            numBars: 40,\n            canvasWidth: 160,\n            canvasHeight: 120,\n            isPlaying: false,\n            shouldReset: false,\n        };\n    }\n\n    handleSpeedChange = (event) => {\n        this.setState({\n            speed: Number(event.target.value),\n        });\n    };\n\n    handleNumBarsChange = (event) => {\n        let newNumBars = Number(event.target.value);\n        this.initializeData(newNumBars);\n        this.setState({ isPlaying: true });\n    };\n\n    handleClick = () => {\n        this.setState((prevState) => {\n            return {\n                isPlaying: !prevState.isPlaying,\n            };\n        });\n    };\n\n    handleReset = () => {\n        this.setState(\n            {\n                shouldReset: true,\n                isPlaying: true,\n            },\n            () => {\n                this.setState({\n                    shouldReset: false,\n                });\n            }\n        );\n    };\n\n    componentDidMount() {\n        this.initializeData();\n    }\n\n    initializeData = (newNumBars = undefined) => {\n        // since this function is called when component mounts but also when user changes numBars, have to decide and use the most up-to-date version of numBars\n        let numBars = newNumBars ? newNumBars : this.state.numBars;\n\n        const randomArray = [];\n        const nearlySortedArray = [];\n        const reversedArray = [];\n        for (let i = 0; i < numBars; i++) {\n            randomArray.push(Math.random() * numBars);\n            nearlySortedArray[i] = randomArray[i];\n            reversedArray[i] = randomArray[i];\n        }\n\n        nearlySortedArray.sort((a, b) => a - b);\n        for (let i = 0; i < numBars / 5; i++) {\n            let i1 = Math.floor(Math.random() * numBars);\n            let i2 = Math.floor(Math.random() * numBars);\n            [nearlySortedArray[i1], nearlySortedArray[i2]] = [\n                nearlySortedArray[i2],\n                nearlySortedArray[i1],\n            ];\n        }\n\n        reversedArray.sort((a, b) => b - a);\n\n        const fewSortedArray = [];\n        const groupSize = 5;\n        for (let i = 0; i < Math.ceil(numBars / groupSize); i++) {\n            let repeatedValue = Math.random() * numBars;\n            for (let j = 0; j < groupSize; j++) {\n                fewSortedArray.push(repeatedValue);\n            }\n        }\n\n        // todo: test fewSortedArrays\n\n        console.log(fewSortedArray);\n        console.log(\n            randomArray.length,\n            nearlySortedArray.length,\n            reversedArray.length,\n            fewSortedArray\n        );\n\n        this.setState({\n            randomArray: randomArray,\n            nearlySortedArray: nearlySortedArray,\n            reversedArray: reversedArray,\n            fewSortedArray: fewSortedArray,\n            // isPlaying: true,\n            numBars: numBars,\n        });\n    };\n\n    render() {\n        const {\n            randomArray,\n            nearlySortedArray,\n            reversedArray,\n            fewSortedArray,\n            ...data\n        } = this.state;\n        // console.log(`randomArray: ${randomArray} data: ${data}`);\n        // console.log(data);\n        let playButtonText = this.state.isPlaying ? \"Pause\" : \"Play\";\n        let playButtonVariant = this.state.isPlaying ? \"warning\" : \"success\";\n\n        // console.log(\n        //     `width: ${this.state.canvasWidth} type: ${typeof this.state\n        //         .canvasWidth}`\n        // );\n        console.log(window.innerWidth);\n        return (\n            <div className=\"app\">\n                <h1 className=\"headline\">Sorting Algorithm Visualizer</h1>\n                <div className=\"controls\">\n                    {/* <button onClick={this.handleClick}>{buttonText}</button> */}\n                    <div className=\"buttons\">\n                        <Button\n                            className=\"play-button\"\n                            variant={playButtonVariant}\n                            onClick={this.handleClick}\n                        >\n                            {playButtonText}\n                        </Button>\n                        <Button\n                            className=\"reset-button\"\n                            onClick={this.handleReset}\n                            variant=\"secondary\"\n                        >\n                            Reset\n                        </Button>\n                    </div>\n\n                    <div className=\"speed-controls\">\n                        <Form.Label>Speed</Form.Label>\n                        <Form.Control\n                            type=\"range\"\n                            min=\"1\"\n                            max=\"100\"\n                            step=\"1\"\n                            id=\"speed\"\n                            onChange={this.handleSpeedChange}\n                            value={this.state.speed}\n                        />\n                    </div>\n\n                    <div className=\"num-bar-controls\">\n                        <Form.Label>Number of Bars</Form.Label>\n                        <Form.Control\n                            as=\"select\"\n                            value={this.state.numBars}\n                            onChange={this.handleNumBarsChange}\n                        >\n                            <option value=\"10\">10</option>\n                            <option value=\"20\">20</option>\n                            <option value=\"40\">40</option>\n                            <option value=\"80\">80</option>\n                            <option value=\"160\">160</option>\n                        </Form.Control>\n                    </div>\n                </div>\n\n                {/* <P5Wrapper sketch={sketch} color={this.state.color}></P5Wrapper> */}\n                <div className=\"grid-container\">\n                    {/* 1st row */}\n                    <div></div>\n                    <p className=\"sort-name\">Bubble</p>\n                    <p className=\"sort-name\">Insertion</p>\n                    <p className=\"sort-name\">Merge</p>\n                    <p className=\"sort-name\">Quick</p>\n                    <p className=\"sort-name\">Selection</p>\n\n                    {/* 2nd row */}\n                    <p className=\"array-name\">Random</p>\n                    <P5Wrapper\n                        sketch={bubbleSketch}\n                        array={randomArray}\n                        {...data}\n                    ></P5Wrapper>\n                    <P5Wrapper\n                        sketch={insertionSketch}\n                        array={randomArray}\n                        {...data}\n                    ></P5Wrapper>\n                    <P5Wrapper\n                        sketch={mergeSketch}\n                        array={randomArray}\n                        {...data}\n                    ></P5Wrapper>\n                    <P5Wrapper\n                        sketch={quickSketch}\n                        array={randomArray}\n                        {...data}\n                    ></P5Wrapper>\n                    <P5Wrapper\n                        sketch={selectionSketch}\n                        array={randomArray}\n                        {...data}\n                    ></P5Wrapper>\n\n                    {/* 3rd row */}\n                    <p className=\"array-name\">Almost Sorted</p>\n                    <P5Wrapper\n                        sketch={bubbleSketch}\n                        array={nearlySortedArray}\n                        {...data}\n                    ></P5Wrapper>\n                    <P5Wrapper\n                        sketch={insertionSketch}\n                        array={nearlySortedArray}\n                        {...data}\n                    ></P5Wrapper>\n                    <P5Wrapper\n                        sketch={mergeSketch}\n                        array={nearlySortedArray}\n                        {...data}\n                    ></P5Wrapper>\n                    <P5Wrapper\n                        sketch={quickSketch}\n                        array={nearlySortedArray}\n                        {...data}\n                    ></P5Wrapper>\n                    <P5Wrapper\n                        sketch={selectionSketch}\n                        array={nearlySortedArray}\n                        {...data}\n                    ></P5Wrapper>\n\n                    {/* 4th row */}\n                    <p className=\"array-name\">Reversed</p>\n                    <P5Wrapper\n                        sketch={bubbleSketch}\n                        array={reversedArray}\n                        {...data}\n                    ></P5Wrapper>\n                    <P5Wrapper\n                        sketch={insertionSketch}\n                        array={reversedArray}\n                        {...data}\n                    ></P5Wrapper>\n                    <P5Wrapper\n                        sketch={mergeSketch}\n                        array={reversedArray}\n                        {...data}\n                    ></P5Wrapper>\n                    <P5Wrapper\n                        sketch={quickSketch}\n                        array={reversedArray}\n                        {...data}\n                    ></P5Wrapper>\n                    <P5Wrapper\n                        sketch={selectionSketch}\n                        array={reversedArray}\n                        {...data}\n                    ></P5Wrapper>\n\n                    {/* 5th row */}\n                    <p className=\"array-name\">Many Similar</p>\n                    <P5Wrapper\n                        sketch={bubbleSketch}\n                        array={fewSortedArray}\n                        {...data}\n                    ></P5Wrapper>\n                    <P5Wrapper\n                        sketch={insertionSketch}\n                        array={fewSortedArray}\n                        {...data}\n                    ></P5Wrapper>\n                    <P5Wrapper\n                        sketch={mergeSketch}\n                        array={fewSortedArray}\n                        {...data}\n                    ></P5Wrapper>\n                    <P5Wrapper\n                        sketch={quickSketch}\n                        array={fewSortedArray}\n                        {...data}\n                    ></P5Wrapper>\n                    <P5Wrapper\n                        sketch={selectionSketch}\n                        array={fewSortedArray}\n                        {...data}\n                    ></P5Wrapper>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n// 1920-890-126-180\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}